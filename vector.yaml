sources:
  webserver:
    type: docker_logs
    exclude_containers: ["observability-clickhouse-1", "observability-grafana-1", "observability-prometheus-1", "observability-loki-1"]

transforms:
  remap_webserver_logs:
    type: remap
    inputs:
      - webserver
    source: |
      . = parse_json!(.message)
      .py_version = .py_version
      .fastapi_version = .fastapi_version
      .environment = .environment
      .service = .service
      .device_type = .device_type
      .detail = .detail
      .status_code = .status_code
      .http_scheme = .http_scheme
      .route = .route
      .method = .method
      .host = .host
      .event = .event
      .level = .level
      if exists(.post_id) {
        .entity_id = .post_id
      } else if exists(.user_id) {
        .entity_id = .user_id
      } else if exists(.newsletter_id) {
        .entity_id = .newsletter_id
      }
      # Transform the timestamp to ClickHouse-compatible format
      if exists(.timestamp) {
        # Replace 'T' with a space
        .timestamp = replace!(.timestamp, r'T', " ")
        # Remove 'Z' and any milliseconds or microseconds
        .timestamp = replace(.timestamp, r'\.\d+Z$', "")
        .timestamp = replace(.timestamp, r'Z$', "")
      }
  filter_logs:
    type: filter
    inputs:
      - remap_webserver_logs
    condition: 'exists(.event)'

sinks:
  clickhouse:
    inputs:
      - filter_logs
    type: clickhouse
    database: logs
    endpoint: http://localhost:8123
    table: application_logs
    healthcheck:
      enabled: true
  loki:
    type: loki
    inputs:
      - filter_logs
    endpoint: http://localhost:3100
    encoding:
      codec: "json"
    labels:
      service: "{{ service }}"        
      status_code: "{{ status_code }}"
      fastapi_version: "{{ fastapi_version }}"
      py_version: "{{ py_version }}"
      environment: "{{ environment }}"   
      host: "{{ host }}"                 
      route: "{{ route }}"               
      method: "{{ method }}"             
      level: "{{ level }}"               
      event: "{{ event }}"               
      entity_id: "{{ entity_id }}"

